EVENT-DRIVEN APP PYTHON KUBERNETES

1. Enviroment Setup
	- Install Python on WSL (sudo apt update, sudo apt install -y python3 python3-pip)
	- Install kubectl in order to interact with Kubernetes cluster:
	curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
	chmod +x ./kubectl
	sudo mv ./kubectl /usr/local/bin/kubectl
	- Enable Docker on WSL:
	1. Open Docker Desktop
	2. Settings > General > Use WSL based engine
	3. Run docker --version in WSL to see if works
	- Install Terraform:
	sudo apt update && sudo apt install -y gnupg software-properties-common curl
	curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
	sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
	sudo apt update && sudo apt install -y terraform
	//When this dont work then try this:
	1. sudo apt update
		sudo apt install -y gnupg software-properties-common curl
	2. curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
	3. sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
	4. sudo apt update
		sudo apt install -y terraform

2. Building the Python Microservice
	- Setting up Google Cloud SDK and credentials:
	sudo apt update && sudo apt install -y apt-transport-https ca-certificates gnupg
	echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
	sudo apt update && sudo apt install -y google-cloud-sdk
	//When that does not work then try this:
	1. Install gcloud directly(curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-422.0.0-linux-x86_64.tar.gz)
	2. Extract the SDK(tar -xf google-cloud-sdk-422.0.0-linux-x86_64.tar.gz)
	3. Install the SDK and restart the shell(./google-cloud-sdk/install.sh)
	4. Initialize the SDK(./google-cloud-sdk/bin/gcloud init) an alternative is to use "gcloud auth login"
	
	- Enable billing, Compute engine API, Kubernetes engine API, Pub Sub API, Cloud Storage API
	- Create a service account and a key(stored in project folder) and export the variable with the .json file
	- Install dependencies - google-cloud-pubsub, google-cloud-storage, you can put them in requirements file(optional) (pip3 install -r requirements.txt)
	- Provision Kubernetes secrets file with base 64 encoded project_id, bucket_name and subscription_id
	- Provision terraform resources(topic, subscription and bucket) and init terraform and apply
	- Dockerize the python application
	- Apply Kubernetes deployment and secrets files
	- Installation of k9s(optional):
		1. Install brew packet manager(/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")
		2. Add brew to PATH
		3. Install Homebrew's dependencies(sudo apt-get install build-essential)
		4. Install k9s through brew(brew install derailed/k9s/k9s)
	- Set up Git and generate PAT token(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)
	- Having Trouble authenticating with GOOGLE_APPLICATION_CREDENTIALS so I am going to try to use Workload Identity method
	- After a really long time of trying out different method I found the one with which I succeeded, I created a secret that contained the service account key and then referenced that to the deployment file and then it worked.
	I created the secret with this command:
	kubectl create secret generic service-account-key --from-file=gcp-k8s-event-driven-app-092926fb4459.json=/mnt/c/Users/Glisto/Desktop/Assessments/event-driven-app/service_account_key/gcp-k8s-event-driven-app-092926fb4459.json
	And now my deployment file looks like this:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-driven-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: event-driven-app
  template:
    metadata:
      labels:
        app: event-driven-app
    spec:
      serviceAccountName: kubernetes-sa
      containers:
        - name: event-driven-app
          image: gcr.io/gcp-k8s-event-driven-app/event-driven-app:latest
          env:
            - name: PROJECT_ID
              value: "gcp-k8s-event-driven-app"
            - name: SUBSCRIPTION_ID
              value: "my-subscription"
            - name: BUCKET_NAME
              value: "b234cke5678t"
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/service-account-key/gcp-k8s-event-driven-app-092926fb4459.json  # Path to your service account key
          volumeMounts:
            - name: service-account-key
              mountPath: /etc/service-account-key  # This is where the key will be accessible in the container
      volumes:
        - name: service-account-key
          secret:
            secretName: service-account-key  # Reference to the secret you created
